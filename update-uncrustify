#!/bin/bash
#
# This server hook enforces that committer have applied uncrustify on changed
# files. For fast-forward pushes it checks files for every commit from oldrev
# to newrev. For pushes with zero oldrev it uses commits from HEAD to newrev.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

result=0

# --- Safety check
if [ -z "$GIT_DIR" ]; then
    echo "Don't run this script from the command line." >&2
    echo " (if you want, you could supply GIT_DIR then run" >&2
    echo "  $0 <ref> <oldrev> <newrev>)" >&2
    exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
    echo "usage: $0 <ref> <oldrev> <newrev>" >&2
    exit 1
fi

if [ "$oldrev" = "0000000000000000000000000000000000000000" ]; then
    oldrev=HEAD
fi

if [ "$newrev" = "0000000000000000000000000000000000000000" ]; then
    exit 0
fi

git rev-parse --short HEAD 2>/dev/null
if [ $? -ne 0 ]; then
    # There is no HEAD yet
    exit 0
fi

function fileInDirs {
    local f=$1
    local dirs=$2
    while read d; do
	if [ "${f:0:${#d}}" == "$d" ]; then
	    echo "$d"
	    return 0
	fi
    done <<< "$dirs"
    return 1
}

uncrustifycfg=$(mktemp)

for rev in $(git log --pretty="format:%H" $oldrev..$newrev); do
    skipDirs=$(git ls-tree --name-only -r $rev | egrep 'nouncrustify$' | xargs -I {} dirname './{}' | sed 's/$/\//g')
    cfgDirs=$(git ls-tree --name-only -r $rev | egrep 'uncrustify.cfg$' | xargs -I {} dirname './{}' | sed 's/$/\//g')

    while read f; do
	if fileInDirs "./$f" "$skipDirs" >/dev/null; then continue; fi
	
	cfgDir=$(fileInDirs "./$f" "$cfgDirs")
	if [ $? -ne 0 ]; then continue; fi

	git show "$rev:${cfgDir:2}uncrustify.cfg" > "$uncrustifycfg"
	
	cmp -s <(git show "$rev:$f") <(git show "$rev:$f" | uncrustify -q -l CPP -c "$uncrustifycfg")
	if [ $? -ne 0 ]; then
	    result=1
	    echo "You must run uncrustify for $f in $rev"
	fi
    done < <(git show --pretty="format:" --name-only $rev | egrep '\.h$|\.cpp$')
done

rm "$uncrustifycfg"

# --- Finished
exit $result
